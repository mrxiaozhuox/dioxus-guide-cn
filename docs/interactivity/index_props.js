import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "docs/interactivity/README.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/interactivity/index.html",
    'title': "交互性设计",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>交互性设计</h1>\n<p>至今我们已经学习了如何构造（包装）我们的程序了，但它现在仅仅是动态的，这没有任何意思。\n所以说在本大章中，我们会尝试让我们的项目 <strong>动起来</strong> ！</p>\n<p>在我们深入学习如何完成交互设计之前，我们先大致了解一下 Dioxus 是如何处理交互的吧。</p>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-state">什么是 <code>State</code><a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-state">§</a></h2>\n<p>每一个应用都会呈现一些内容到UI界面上，Dioxus 框架需要负责就是将这些内容渲染到页面之中。\n而作为开发者的你，则需要为框架提供具体的数据内容。</p>\n<p>可以动态更新的数据内容在 Dioxus 中则称之为：<code>State</code></p>\n<p>如果使用 <code>dioxus::web::launch_with_props</code> 运行程序，那么你需要提供一个初始 <code>State</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明初始化的 State</span>\n    <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token class-name">PostProps</span> <span class="token punctuation">{</span>\n        id<span class="token punctuation">:</span> <span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        score<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n        comment_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        post_time<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxuslabs.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        original_poster<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxus"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 启动 Dioxus 程序并传入 props</span>\n    <span class="token namespace">dioxus<span class="token punctuation">::</span>desktop<span class="token punctuation">::</span></span><span class="token function">launch_with_props</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>它会向 <code>App</code> 传递一个 <strong>不可变</strong> 的 <code>PostProps</code>，你也可以将它继续向下级组件传递：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">PostProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">{</span>\n        <span class="token class-name">Title</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>cx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>title <span class="token punctuation">}</span>\n        <span class="token class-name">Score</span> <span class="token punctuation">{</span> score<span class="token punctuation">:</span> <span class="token operator">&amp;</span>cx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>score <span class="token punctuation">}</span>\n        <span class="token comment">// etc</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Dioxus 对于 State 的设计遵循了：<code>单向数据流</code> 。\n当你的组件创建了子组件时，程序的结构最终会形成一个 “树” ，其中状态从 “根” 组件向下传递到树的 “叶” 。</p>\n<p><img src="../../assets/component_tree.png" alt="component_tree"></p>\n<p>在 Dioxus 中， State 总是从父组件流向子组件。</p>\n<h2 id="%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-state">如何更新 <code>State</code><a class="anchor" href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-state">§</a></h2>\n<p>接下来我们需要了解如何对 <code>State</code> 数据进行更新。\nDioxus 提供了好几种方法使得 <code>State</code> 能在运行时被更新。\n对于上面的 Demo 中定义的 <code>Root State</code>，我们可以直接使用：<code>update_root_props</code> 方法来更新。\n但是它会在只更新了其中一小部分文本和属性的情况下刷新我们整个应用程序的渲染树。（这往往都不是我们想要的）</p>\n<p>所以说在此时，我们需要用到一个叫 <code>Hook 钩子</code> 的东西，它会在你的组件内部存放数据，并使得这些数据 “从上往下” 的 “流动” 到子组件中。\nHook 是一系列特殊的函数，它在组件的内存中保留一个状态槽，并提供一些功能来更新该状态。</p>\n<p>我们最常用的 <code>Hook</code> 便是函数 <code>use_state</code> ，它允许你存放数据到内部，并支持你对数据的更新编辑。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span><span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">let</span> post <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n        <span class="token class-name">PostData</span> <span class="token punctuation">{</span>\n            id<span class="token punctuation">:</span> <span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            score<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n            comment_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            post_time<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxuslabs.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            original_poster<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxus"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">{</span>\n        <span class="token class-name">Title</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>post<span class="token punctuation">.</span>title <span class="token punctuation">}</span>\n        <span class="token class-name">Score</span> <span class="token punctuation">{</span> score<span class="token punctuation">:</span> <span class="token operator">&amp;</span>post<span class="token punctuation">.</span>score <span class="token punctuation">}</span>\n        <span class="token comment">// etc</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们可以通过 <code>set</code> 方法直接更新它的值：</p>\n<pre class="language-rust"><code class="language-rust">post<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token class-name">PostData</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    score<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    comment_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    post_time<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"google.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"goodbye, world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    original_poster<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"google"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0-state">何时更新 State<a class="anchor" href="#%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0-state">§</a></h2>\n<p>有几种不同的情况下你可以更新状态：你可以在响应用户操作时更新，或在一些后台异步操作被完成后。</p>\n<h3 id="%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">监听事件<a class="anchor" href="#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">§</a></h3>\n<p>我们可以在响应用户操作时更新数据，也就是在监听器中实现更新代码。</p>\n<p>比如说我们希望在按钮被按下后随机生成一篇文章：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span><span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> post <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">PostData</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">{</span>\n        button <span class="token punctuation">{</span>\n            on_click<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> post<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">PostData</span><span class="token punctuation">::</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token string">"Generate a random post"</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Post</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token operator">&amp;</span>post <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样当按钮 <code>onclick</code> 触发后，会对 <code>post</code> 进行更新。</p>\n<h3 id="%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1">异步任务<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1">§</a></h3>\n<p>我们也可以在一个协程的执行程序内部进行数据更新，协程就是一个定义的异步代码块。\n它能够与组件中的值、钩子和其他数据干净地交互。\n由于协程其中的数据必须在 \'static 生命周期有效。\n所以我们必须显式地声明我们的任务将依赖哪些值，以避免在 React 中常见的道具过时问题。</p>\n<p>我们可以在组件中使用任务来构建一个计时的微型秒表。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span><span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> sec_elapsed <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">use_future</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> sec_elapsed <span class="token operator">=</span> sec_elapsed<span class="token punctuation">.</span><span class="token function">for_async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>\n            <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n                <span class="token class-name">TimeoutFuture</span><span class="token punctuation">::</span><span class="token function">from_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                sec_elapsed <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token macro property">rsx!</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> div <span class="token punctuation">{</span> <span class="token string">"Current stopwatch time: {sec_elapsed}"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>使用异步代码可能很麻烦！后续我们有一整个章节是关于如何在 Dioxus 应用程序中正确使用异步的。</p>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@17.0.2/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@17.0.2/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u4EA4\u4E92\u6027\u8BBE\u8BA1"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>至今我们已经学习了如何构造（包装）我们的程序了，但它现在仅仅是动态的，这没有任何意思。\n所以说在本大章中，我们会尝试让我们的项目 <strong>动起来</strong> ！</p>\n<p>在我们深入学习如何完成交互设计之前，我们先大致了解一下 Dioxus 是如何处理交互的吧。</p>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-state">什么是 <code>State</code><a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-state">§</a></h2>\n<p>每一个应用都会呈现一些内容到UI界面上，Dioxus 框架需要负责就是将这些内容渲染到页面之中。\n而作为开发者的你，则需要为框架提供具体的数据内容。</p>\n<p>可以动态更新的数据内容在 Dioxus 中则称之为：<code>State</code></p>\n<p>如果使用 <code>dioxus::web::launch_with_props</code> 运行程序，那么你需要提供一个初始 <code>State</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明初始化的 State</span>\n    <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token class-name">PostProps</span> <span class="token punctuation">{</span>\n        id<span class="token punctuation">:</span> <span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        score<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n        comment_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        post_time<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxuslabs.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        original_poster<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxus"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 启动 Dioxus 程序并传入 props</span>\n    <span class="token namespace">dioxus<span class="token punctuation">::</span>desktop<span class="token punctuation">::</span></span><span class="token function">launch_with_props</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>它会向 <code>App</code> 传递一个 <strong>不可变</strong> 的 <code>PostProps</code>，你也可以将它继续向下级组件传递：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">PostProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">{</span>\n        <span class="token class-name">Title</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>cx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>title <span class="token punctuation">}</span>\n        <span class="token class-name">Score</span> <span class="token punctuation">{</span> score<span class="token punctuation">:</span> <span class="token operator">&amp;</span>cx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>score <span class="token punctuation">}</span>\n        <span class="token comment">// etc</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Dioxus 对于 State 的设计遵循了：<code>单向数据流</code> 。\n当你的组件创建了子组件时，程序的结构最终会形成一个 “树” ，其中状态从 “根” 组件向下传递到树的 “叶” 。</p>\n<p><img src="../../assets/component_tree.png" alt="component_tree"></p>\n<p>在 Dioxus 中， State 总是从父组件流向子组件。</p>\n<h2 id="%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-state">如何更新 <code>State</code><a class="anchor" href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-state">§</a></h2>\n<p>接下来我们需要了解如何对 <code>State</code> 数据进行更新。\nDioxus 提供了好几种方法使得 <code>State</code> 能在运行时被更新。\n对于上面的 Demo 中定义的 <code>Root State</code>，我们可以直接使用：<code>update_root_props</code> 方法来更新。\n但是它会在只更新了其中一小部分文本和属性的情况下刷新我们整个应用程序的渲染树。（这往往都不是我们想要的）</p>\n<p>所以说在此时，我们需要用到一个叫 <code>Hook 钩子</code> 的东西，它会在你的组件内部存放数据，并使得这些数据 “从上往下” 的 “流动” 到子组件中。\nHook 是一系列特殊的函数，它在组件的内存中保留一个状态槽，并提供一些功能来更新该状态。</p>\n<p>我们最常用的 <code>Hook</code> 便是函数 <code>use_state</code> ，它允许你存放数据到内部，并支持你对数据的更新编辑。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span><span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">let</span> post <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n        <span class="token class-name">PostData</span> <span class="token punctuation">{</span>\n            id<span class="token punctuation">:</span> <span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            score<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n            comment_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            post_time<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxuslabs.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            original_poster<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"dioxus"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">{</span>\n        <span class="token class-name">Title</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>post<span class="token punctuation">.</span>title <span class="token punctuation">}</span>\n        <span class="token class-name">Score</span> <span class="token punctuation">{</span> score<span class="token punctuation">:</span> <span class="token operator">&amp;</span>post<span class="token punctuation">.</span>score <span class="token punctuation">}</span>\n        <span class="token comment">// etc</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们可以通过 <code>set</code> 方法直接更新它的值：</p>\n<pre class="language-rust"><code class="language-rust">post<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token class-name">PostData</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    score<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    comment_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    post_time<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"google.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"goodbye, world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    original_poster<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"google"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0-state">何时更新 State<a class="anchor" href="#%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0-state">§</a></h2>\n<p>有几种不同的情况下你可以更新状态：你可以在响应用户操作时更新，或在一些后台异步操作被完成后。</p>\n<h3 id="%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">监听事件<a class="anchor" href="#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">§</a></h3>\n<p>我们可以在响应用户操作时更新数据，也就是在监听器中实现更新代码。</p>\n<p>比如说我们希望在按钮被按下后随机生成一篇文章：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span><span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> post <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">PostData</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">{</span>\n        button <span class="token punctuation">{</span>\n            on_click<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> post<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">PostData</span><span class="token punctuation">::</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token string">"Generate a random post"</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Post</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token operator">&amp;</span>post <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>   \n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样当按钮 <code>onclick</code> 触发后，会对 <code>post</code> 进行更新。</p>\n<h3 id="%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1">异步任务<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1">§</a></h3>\n<p>我们也可以在一个协程的执行程序内部进行数据更新，协程就是一个定义的异步代码块。\n它能够与组件中的值、钩子和其他数据干净地交互。\n由于协程其中的数据必须在 \'static 生命周期有效。\n所以我们必须显式地声明我们的任务将依赖哪些值，以避免在 React 中常见的道具过时问题。</p>\n<p>我们可以在组件中使用任务来构建一个计时的微型秒表。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">App</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span><span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> sec_elapsed <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">use_future</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> sec_elapsed <span class="token operator">=</span> sec_elapsed<span class="token punctuation">.</span><span class="token function">for_async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>\n            <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n                <span class="token class-name">TimeoutFuture</span><span class="token punctuation">::</span><span class="token function">from_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                sec_elapsed <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token macro property">rsx!</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> div <span class="token punctuation">{</span> <span class="token string">"Current stopwatch time: {sec_elapsed}"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>使用异步代码可能很麻烦！后续我们有一整个章节是关于如何在 Dioxus 应用程序中正确使用异步的。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BB%80%E4%B9%88%E6%98%AF-state" }, "\u4EC0\u4E48\u662F State")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-state" }, "\u5982\u4F55\u66F4\u65B0 State")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0-state" }, "\u4F55\u65F6\u66F4\u65B0 State"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6" }, "\u76D1\u542C\u4E8B\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1" }, "\u5F02\u6B65\u4EFB\u52A1")))))),
    'author': "YuKun Liu",
    'contributors': [
        "YuKun Liu"
    ],
    'date': "2022-02-09T02:26:24.000Z",
    'updated': null,
    'excerpt': "至今我们已经学习了如何构造（包装）我们的程序了，但它现在仅仅是动态的，这没有任何意思。 所以说在本大章中，我们会尝试让我们的项目 动起来 ！ 在我们深入学习如何完成交互设计之前，我们先大致了解一下 Dioxus 是如何处理...",
    'cover': "../../assets/component_tree.png",
    'sidebar': [
        {
            "text": "介绍",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "text": "安装",
            "link": "/docs/setup.html"
        },
        {
            "text": "入门",
            "link": "/docs/hello-world.html"
        },
        {
            "text": "UI设计",
            "link": "/docs/ui/index.html",
            "children": [
                {
                    "text": "元素介绍",
                    "link": "/docs/ui/vnodes.html"
                },
                {
                    "text": "条件渲染",
                    "link": "/docs/ui/conditional-render.html"
                },
                {
                    "text": "列表渲染",
                    "link": "/docs/ui/lists.html"
                },
                {
                    "text": "特殊属性",
                    "link": "/docs/ui/special-attributes.html"
                }
            ]
        },
        {
            "text": "组件封装",
            "link": "/docs/components/index.html",
            "children": [
                {
                    "text": "组件属性",
                    "link": "/docs/components/properties.html"
                },
                {
                    "text": "传递子元素和属性",
                    "link": "/docs/components/children-attributes.html"
                }
            ]
        },
        {
            "text": "交互性",
            "link": "/docs/interactivity/index.html",
            "children": [
                {
                    "text": "钩子与内部状态",
                    "link": "/docs/interactivity/hooks-state.html"
                }
            ]
        }
    ]
};
