import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "docs/components/README.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/components/index.html",
    'title': "组件介绍",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>组件介绍</h1>\n<p>在上一章节中，我们简单的介绍了 <code>元素</code> 的使用以及如何构造一个简单的 UI 页面。</p>\n<p>在这一大章中，我们会学习：</p>\n<ul>\n<li>如何完成一个组件</li>\n<li>如何对组件进行建模</li>\n<li>如何 “模块化（声明式）的思考”</li>\n</ul>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6">什么是组件？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6">§</a></h2>\n<p>简单来说，组件就是将一种独特的功能封装为函数，根据不同的输入进行结果 <code>元素</code> 的输出。\n（它就像函数一样，根据输入内容，返回不同的输出结果，且它是可以复用的）</p>\n<h3 id="%E4%BB%8E%E7%8E%B0%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%AD%E5%AF%BB%E6%89%BE%E7%81%B5%E6%84%9F">从现有内容中寻找灵感<a class="anchor" href="#%E4%BB%8E%E7%8E%B0%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%AD%E5%AF%BB%E6%89%BE%E7%81%B5%E6%84%9F">§</a></h3>\n<p>下图来源于知乎的推荐页面：</p>\n<p><img src="../../assets/components_zhihu_demo.png" alt="ZHIHU"></p>\n<p>知乎的页面本质上就一个列表，每个列表项里展示为你推荐的一个内容，那我们来解析下里面包含的内容：</p>\n<ul>\n<li>标题</li>\n<li>作者</li>\n<li>大致内容</li>\n<li>赞同数量</li>\n<li>一堆按钮</li>\n</ul>\n<p>我们尝试为它封装一个 <code>结构体(struct)</code> ：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">PostData</span> <span class="token punctuation">{</span>\n    titile<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    like_num<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>在上方结构体中我们不需要考虑 按钮 ，因为它并不是一个变化的值。</p>\n</blockquote>\n<h3 id="%E4%B8%BA-dioxus-%E5%BB%BA%E6%A8%A1">为 Dioxus 建模<a class="anchor" href="#%E4%B8%BA-dioxus-%E5%BB%BA%E6%A8%A1">§</a></h3>\n<p>要想将上面的结构体作为 <code>Props</code> 使用，我们只需要为它添加一个 trait ：<code>Props</code></p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Props, PartialEq)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">PostProps</span> <span class="token punctuation">{</span>\n    titile<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    like_num<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>接下来我们编写组件的主体函数：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">Post</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">PostProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        div <span class="token punctuation">{</span>\n            h3 <span class="token punctuation">{</span> <span class="token string">"{cx.props.title}"</span> <span class="token punctuation">}</span>\n            p <span class="token punctuation">{</span> <span class="token string">"{cx.props.author}: {cx.props.content}"</span> <span class="token punctuation">}</span>\n            <span class="token class-name">ButtonGroup</span> <span class="token punctuation">{</span> like_number<span class="token punctuation">:</span> cx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>like_num <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面的代码大致能渲染出那种效果（当然这只是模拟，不可能一模一样）</p>\n<p>我们需要注意的是这个 <code>ButtonGroup</code> ，它也是一个我们封装的组件，接受一个 <code>like_number</code> 的 <code>Props</code> 参数。\n它用来模拟下面的几个按钮，接受 <code>like_num</code> 则是为了打印 点赞数量。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Props, PartialEq)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">ButtonGroupProps</span> <span class="token punctuation">{</span>\n    like_number<span class="token punctuation">:</span> <span class="token keyword">i32</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">ButtonGroup</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">ButtonGroupProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        div <span class="token punctuation">{</span>\n            class<span class="token punctuation">:</span> <span class="token string">"button-group"</span><span class="token punctuation">,</span>\n            button <span class="token punctuation">{</span>\n                background_color<span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"↑ 赞同 {cx.props.like_number}"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"↓"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"添加评论"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"分享"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"收藏"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"喜欢"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%80%9F%E7%94%A8%E5%8F%98%E9%87%8F">借用变量<a class="anchor" href="#%E5%80%9F%E7%94%A8%E5%8F%98%E9%87%8F">§</a></h2>\n<p>如果我们使用的是借用变量，如 <code>&amp;str</code> 而非 <code>String</code>，我们只需要为 <code>Props</code> 结构添加生命周期。</p>\n<pre class="language-autoit"><code class="language-autoit">#<span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span><span class="token punctuation">]</span>\nstruct TitleCardProps<span class="token operator">&lt;</span>\'a<span class="token operator">></span> {\n    title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>\'a str<span class="token punctuation">,</span>\n}\n\nfn TitleCard<span class="token operator">&lt;</span><span class="token string">\'a>(cx: Scope&lt;\'</span>a<span class="token punctuation">,</span> TitleCardProps<span class="token operator">&lt;</span>\'a<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Element {\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>rsx!{\n        h1 { <span class="token string">"{cx.props.title}"</span> }\n    }<span class="token punctuation">)</span>\n}  \n</code></pre>\n<p>使用引用可以减少对象被 <code>Clone</code> 的花销。</p>\n<h3 id="scope-%E5%AF%B9%E8%B1%A1">Scope 对象<a class="anchor" href="#scope-%E5%AF%B9%E8%B1%A1">§</a></h3>\n<p>虽然 Dioxus 在很多方面和 React 相似，但是也有一些特性上也有所不同。\n比如在组件声明中 React 没有 Scope 这一变量。</p>\n<p>在没有 <code>this</code> 指向当前对象时，<code>useState()</code> 似乎无法完成工作。\nReact 使用全局变量来存储此信息。\n全局可变变量必须仔细管理，但在 Rust 程序中通常不鼓励这样做。\n所以说 Dioxus 需要 Scope 来维护一些内容和功能：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">Post</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">PostProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@17.0.2/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@17.0.2/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u7EC4\u4EF6\u4ECB\u7ECD"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>在上一章节中，我们简单的介绍了 <code>元素</code> 的使用以及如何构造一个简单的 UI 页面。</p>\n<p>在这一大章中，我们会学习：</p>\n<ul>\n<li>如何完成一个组件</li>\n<li>如何对组件进行建模</li>\n<li>如何 “模块化（声明式）的思考”</li>\n</ul>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6">什么是组件？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6">§</a></h2>\n<p>简单来说，组件就是将一种独特的功能封装为函数，根据不同的输入进行结果 <code>元素</code> 的输出。\n（它就像函数一样，根据输入内容，返回不同的输出结果，且它是可以复用的）</p>\n<h3 id="%E4%BB%8E%E7%8E%B0%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%AD%E5%AF%BB%E6%89%BE%E7%81%B5%E6%84%9F">从现有内容中寻找灵感<a class="anchor" href="#%E4%BB%8E%E7%8E%B0%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%AD%E5%AF%BB%E6%89%BE%E7%81%B5%E6%84%9F">§</a></h3>\n<p>下图来源于知乎的推荐页面：</p>\n<p><img src="../../assets/components_zhihu_demo.png" alt="ZHIHU"></p>\n<p>知乎的页面本质上就一个列表，每个列表项里展示为你推荐的一个内容，那我们来解析下里面包含的内容：</p>\n<ul>\n<li>标题</li>\n<li>作者</li>\n<li>大致内容</li>\n<li>赞同数量</li>\n<li>一堆按钮</li>\n</ul>\n<p>我们尝试为它封装一个 <code>结构体(struct)</code> ：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">PostData</span> <span class="token punctuation">{</span>\n    titile<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    like_num<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>在上方结构体中我们不需要考虑 按钮 ，因为它并不是一个变化的值。</p>\n</blockquote>\n<h3 id="%E4%B8%BA-dioxus-%E5%BB%BA%E6%A8%A1">为 Dioxus 建模<a class="anchor" href="#%E4%B8%BA-dioxus-%E5%BB%BA%E6%A8%A1">§</a></h3>\n<p>要想将上面的结构体作为 <code>Props</code> 使用，我们只需要为它添加一个 trait ：<code>Props</code></p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Props, PartialEq)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">PostProps</span> <span class="token punctuation">{</span>\n    titile<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    like_num<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>接下来我们编写组件的主体函数：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">Post</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">PostProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        div <span class="token punctuation">{</span>\n            h3 <span class="token punctuation">{</span> <span class="token string">"{cx.props.title}"</span> <span class="token punctuation">}</span>\n            p <span class="token punctuation">{</span> <span class="token string">"{cx.props.author}: {cx.props.content}"</span> <span class="token punctuation">}</span>\n            <span class="token class-name">ButtonGroup</span> <span class="token punctuation">{</span> like_number<span class="token punctuation">:</span> cx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>like_num <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面的代码大致能渲染出那种效果（当然这只是模拟，不可能一模一样）</p>\n<p>我们需要注意的是这个 <code>ButtonGroup</code> ，它也是一个我们封装的组件，接受一个 <code>like_number</code> 的 <code>Props</code> 参数。\n它用来模拟下面的几个按钮，接受 <code>like_num</code> 则是为了打印 点赞数量。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Props, PartialEq)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">ButtonGroupProps</span> <span class="token punctuation">{</span>\n    like_number<span class="token punctuation">:</span> <span class="token keyword">i32</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">ButtonGroup</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">ButtonGroupProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        div <span class="token punctuation">{</span>\n            class<span class="token punctuation">:</span> <span class="token string">"button-group"</span><span class="token punctuation">,</span>\n            button <span class="token punctuation">{</span>\n                background_color<span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"↑ 赞同 {cx.props.like_number}"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"↓"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"添加评论"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"分享"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"收藏"</span>\n            <span class="token punctuation">}</span>\n            button <span class="token punctuation">{</span>\n                onclick<span class="token punctuation">:</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">/** 处理点击事件 **/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string">"喜欢"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%80%9F%E7%94%A8%E5%8F%98%E9%87%8F">借用变量<a class="anchor" href="#%E5%80%9F%E7%94%A8%E5%8F%98%E9%87%8F">§</a></h2>\n<p>如果我们使用的是借用变量，如 <code>&amp;str</code> 而非 <code>String</code>，我们只需要为 <code>Props</code> 结构添加生命周期。</p>\n<pre class="language-autoit"><code class="language-autoit">#<span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span><span class="token punctuation">]</span>\nstruct TitleCardProps<span class="token operator">&lt;</span>\'a<span class="token operator">></span> {\n    title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>\'a str<span class="token punctuation">,</span>\n}\n\nfn TitleCard<span class="token operator">&lt;</span><span class="token string">\'a>(cx: Scope&lt;\'</span>a<span class="token punctuation">,</span> TitleCardProps<span class="token operator">&lt;</span>\'a<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Element {\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>rsx!{\n        h1 { <span class="token string">"{cx.props.title}"</span> }\n    }<span class="token punctuation">)</span>\n}  \n</code></pre>\n<p>使用引用可以减少对象被 <code>Clone</code> 的花销。</p>\n<h3 id="scope-%E5%AF%B9%E8%B1%A1">Scope 对象<a class="anchor" href="#scope-%E5%AF%B9%E8%B1%A1">§</a></h3>\n<p>虽然 Dioxus 在很多方面和 React 相似，但是也有一些特性上也有所不同。\n比如在组件声明中 React 没有 Scope 这一变量。</p>\n<p>在没有 <code>this</code> 指向当前对象时，<code>useState()</code> 似乎无法完成工作。\nReact 使用全局变量来存储此信息。\n全局可变变量必须仔细管理，但在 Rust 程序中通常不鼓励这样做。\n所以说 Dioxus 需要 Scope 来维护一些内容和功能：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">Post</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token operator">&lt;</span><span class="token class-name">PostProps</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6" }, "\u4EC0\u4E48\u662F\u7EC4\u4EF6\uFF1F"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BB%8E%E7%8E%B0%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%AD%E5%AF%BB%E6%89%BE%E7%81%B5%E6%84%9F" }, "\u4ECE\u73B0\u6709\u5185\u5BB9\u4E2D\u5BFB\u627E\u7075\u611F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%BA-dioxus-%E5%BB%BA%E6%A8%A1" }, "\u4E3A Dioxus \u5EFA\u6A21")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%80%9F%E7%94%A8%E5%8F%98%E9%87%8F" }, "\u501F\u7528\u53D8\u91CF"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#scope-%E5%AF%B9%E8%B1%A1" }, "Scope \u5BF9\u8C61")))))),
    'author': "YuKun Liu",
    'contributors': [
        "YuKun Liu"
    ],
    'date': "2022-02-14T09:04:10.000Z",
    'updated': null,
    'excerpt': "在上一章节中，我们简单的介绍了 元素 的使用以及如何构造一个简单的 UI 页面。 在这一大章中，我们会学习： - 如何完成一个组件 - 如何对组件进行建模 - 如何 “模块化（声明式）的思考” 什么是组件？ 简单来说，组件就是将一...",
    'cover': "../../assets/components_zhihu_demo.png",
    'sidebar': [
        {
            "text": "介绍",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "text": "安装",
            "link": "/docs/setup.html"
        },
        {
            "text": "入门",
            "link": "/docs/hello-world.html"
        },
        {
            "text": "UI设计",
            "link": "/docs/ui/index.html",
            "children": [
                {
                    "text": "元素介绍",
                    "link": "/docs/ui/vnodes.html"
                },
                {
                    "text": "条件渲染",
                    "link": "/docs/ui/conditional-render.html"
                },
                {
                    "text": "列表渲染",
                    "link": "/docs/ui/lists.html"
                },
                {
                    "text": "特殊属性",
                    "link": "/docs/ui/special-attributes.html"
                }
            ]
        },
        {
            "text": "组件封装",
            "link": "/docs/components/index.html",
            "children": [
                {
                    "text": "组件属性",
                    "link": "/docs/components/properties.html"
                },
                {
                    "text": "传递子元素和属性",
                    "link": "/docs/components/children-attributes.html"
                }
            ]
        },
        {
            "text": "交互性",
            "link": "/docs/interactivity/index.html",
            "children": [
                {
                    "text": "钩子与内部状态",
                    "link": "/docs/interactivity/hooks-state.html"
                }
            ]
        }
    ]
};
