import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "docs/interactivity/hooks-state.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/interactivity/hooks-state.html",
    'title': "钩子（Hooks）与内部状态（State）",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>钩子（Hooks）与内部状态（State）</h1>\n<p>在本章节中，我们将更加深入的了解 Hook 的工作原理。</p>\n<h2 id="hooks-%E7%90%86%E8%AE%BA">Hooks 理论<a class="anchor" href="#hooks-%E7%90%86%E8%AE%BA">§</a></h2>\n<p>在过去的几十年里，计算机学者和开发者们一直在试图寻找一种设计用户界面的 “正确方法”。</p>\n<p>现在来看，已经出现了很多种设计思路，而它们都各有优势，而大致上有这两种：</p>\n<ul>\n<li>即时式用户界面 - 它会在每次更新时刷新整个界面内容。</li>\n<li>保留式用户界面 - 它仅仅会更新被变化的那一部分内容。</li>\n</ul>\n<p>通常来说，即时式的设计方法会更加方便开发，但随着功能的增加，也会出现很多问题。（比如性能）\n现代的大部分应用都采用了 “保留式” 的方案：你的代码更改了具体的内容，但呈现程序负责实际绘制到屏幕上。\n状态信息也不会因为 UI 的更新而被重置，它会在整个程序的运行周期内始终保持不变（除非人为的触发了更新），\n而 Dioxus 提供了一种机制来保持这些状态信息。</p>\n<p>在这里特意声明一下：在运行过程中，一个组件的函数（包括 app 的入口），都不止运行一次，它会在数据更新后被重新调用。\n这就是上面说到保存的意思，使用 Hook 工具下的 API 获取的值、引用、可变引用都是已经被保存的值（也就是包含修改的值），而不是第一次初始化的值。</p>\n<h2 id="hooks-%E6%9C%BA%E5%88%B6">Hooks 机制<a class="anchor" href="#hooks-%E6%9C%BA%E5%88%B6">§</a></h2>\n<p>为了在重复的渲染期间保持状态，Dioxus 为 Hook 提供了 <code>use_hook</code> 的 API ，它会返回一个可变的数据引用。\n它来自于 <code>use_hook</code> 中的初始化函数最终值。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 后续代码...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们可以在事件中对它进行更新：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span>\n            onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>准确来说，我们每一次调用 <code>use_hook</code> 都会获得一个 <code>&amp;mut T</code> 的值。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">u32</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> friends<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"Jane Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在内部，我们使用一个数组来保存每一次 use_hook 的信息，同时也包含了它们的顺序。</p>\n<p>在内部，它们大概是这样存放的：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token punctuation">[</span>\n    <span class="token class-name">Hook</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token class-name">Hook</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token class-name">Hook</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>它会严格按照我们声明时的顺序被保存，所以说 Hooks Api 不允许被使用在任何<strong>条件语句</strong>中，它会打断顺序，从而无法完成匹配。\n被打乱的调用顺序会直接的导致 Dioxus 程序的 painc 错误，因为它无法处理这种问题。当然有一种函数 <code>try_use_hook</code> ，\n但我们并不建议您在项目中使用它。</p>\n<h2 id="%E6%9E%84%E5%BB%BA-hooks">构建 Hooks<a class="anchor" href="#%E6%9E%84%E5%BB%BA-hooks">§</a></h2>\n<p><code>use_hook</code> 所返回的 <code>&amp;mut T</code> 在很多场景下并不方便使用。</p>\n<p>考虑一下，我们尝试将 <code>&amp;mut String</code> 同时传递给两个事件处理器：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Rust 不会允许它通过编译！我们不能将<strong>唯一的</strong>可变引用 “分成两份” 来使用。\n不过我们可以将可变引用重新借用为不可变引用交给两个程序使用：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token operator">*</span>cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过我们可以使用 <code>Cell</code> 来通过内部可变性来更新值，它的开销几乎为零，不过它的限制要比类似的 <code>RefCell</code> 多一些。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Cell</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'static</span> <span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Cell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E9%80%9A%E8%BF%87-hooks-%E6%9B%B4%E6%96%B0">通过 Hooks 更新<a class="anchor" href="#%E9%80%9A%E8%BF%87-hooks-%E6%9B%B4%E6%96%B0">§</a></h2>\n<p>类似于 <code>use_state</code> 和 <code>use_ref</code> 通过封装 <code>hooks</code> 来实现可变 <code>Copy</code> ，\n此外，每当设置了新值，它还会将组件标记为 <code>dirty</code>。组件就知道需要要被更新。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> set_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        <span class="token string">"Hello, {name}"</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">set_name</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">set_name</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在内部，我们的 <code>set</code> 函数类似于这样：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token class-name">UseState</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> new<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将内容进行替换更新</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 将当前组件标记为需要刷新</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>cx<span class="token punctuation">.</span><span class="token function">needs_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们所实现的大部分 Hooks 都提供了 Deref 在它们的值之中，如果你想直接访问它们的值：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> _set_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">match</span> <span class="token operator">*</span>name <span class="token punctuation">{</span>\n        <span class="token string">"Jack"</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token string">"Jill"</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        _ <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="dioxus-hooks-%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95">Dioxus-Hooks 提供的方法<a class="anchor" href="#dioxus-hooks-%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95">§</a></h2>\n<p>我们通过 <code>Dioxus-Hooks</code> 为各位开发者提供了以下这些钩子方法，请根据需求自行调用：</p>\n<ul>\n<li>use_state - 储存状态信息并在适当的时候更新</li>\n<li>use_ref - 使用 Refcell 存放未实现 Clone 的数据</li>\n<li>use_future - 存放在初始化结束后需要的 Future</li>\n<li>use_coroutine - 存放可以被 启动/暂停/通讯的 Future</li>\n<li>use_noderef - 存放本地元素的句柄</li>\n<li>use_callback - 存放实现了 PartialEq 的回调用于记忆化</li>\n<li>use_provide_context - 暴露状态数据到派生组件中</li>\n<li>use_context - 使用 use_provide_context 的状态数据</li>\n</ul>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@17.0.2/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@17.0.2/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u94A9\u5B50\uFF08Hooks\uFF09\u4E0E\u5185\u90E8\u72B6\u6001\uFF08State\uFF09"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>在本章节中，我们将更加深入的了解 Hook 的工作原理。</p>\n<h2 id="hooks-%E7%90%86%E8%AE%BA">Hooks 理论<a class="anchor" href="#hooks-%E7%90%86%E8%AE%BA">§</a></h2>\n<p>在过去的几十年里，计算机学者和开发者们一直在试图寻找一种设计用户界面的 “正确方法”。</p>\n<p>现在来看，已经出现了很多种设计思路，而它们都各有优势，而大致上有这两种：</p>\n<ul>\n<li>即时式用户界面 - 它会在每次更新时刷新整个界面内容。</li>\n<li>保留式用户界面 - 它仅仅会更新被变化的那一部分内容。</li>\n</ul>\n<p>通常来说，即时式的设计方法会更加方便开发，但随着功能的增加，也会出现很多问题。（比如性能）\n现代的大部分应用都采用了 “保留式” 的方案：你的代码更改了具体的内容，但呈现程序负责实际绘制到屏幕上。\n状态信息也不会因为 UI 的更新而被重置，它会在整个程序的运行周期内始终保持不变（除非人为的触发了更新），\n而 Dioxus 提供了一种机制来保持这些状态信息。</p>\n<p>在这里特意声明一下：在运行过程中，一个组件的函数（包括 app 的入口），都不止运行一次，它会在数据更新后被重新调用。\n这就是上面说到保存的意思，使用 Hook 工具下的 API 获取的值、引用、可变引用都是已经被保存的值（也就是包含修改的值），而不是第一次初始化的值。</p>\n<h2 id="hooks-%E6%9C%BA%E5%88%B6">Hooks 机制<a class="anchor" href="#hooks-%E6%9C%BA%E5%88%B6">§</a></h2>\n<p>为了在重复的渲染期间保持状态，Dioxus 为 Hook 提供了 <code>use_hook</code> 的 API ，它会返回一个可变的数据引用。\n它来自于 <code>use_hook</code> 中的初始化函数最终值。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 后续代码...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们可以在事件中对它进行更新：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span>\n            onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>准确来说，我们每一次调用 <code>use_hook</code> 都会获得一个 <code>&amp;mut T</code> 的值。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">u32</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> friends<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"Jane Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在内部，我们使用一个数组来保存每一次 use_hook 的信息，同时也包含了它们的顺序。</p>\n<p>在内部，它们大概是这样存放的：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token punctuation">[</span>\n    <span class="token class-name">Hook</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token class-name">Hook</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token class-name">Hook</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>它会严格按照我们声明时的顺序被保存，所以说 Hooks Api 不允许被使用在任何<strong>条件语句</strong>中，它会打断顺序，从而无法完成匹配。\n被打乱的调用顺序会直接的导致 Dioxus 程序的 painc 错误，因为它无法处理这种问题。当然有一种函数 <code>try_use_hook</code> ，\n但我们并不建议您在项目中使用它。</p>\n<h2 id="%E6%9E%84%E5%BB%BA-hooks">构建 Hooks<a class="anchor" href="#%E6%9E%84%E5%BB%BA-hooks">§</a></h2>\n<p><code>use_hook</code> 所返回的 <code>&amp;mut T</code> 在很多场景下并不方便使用。</p>\n<p>考虑一下，我们尝试将 <code>&amp;mut String</code> 同时传递给两个事件处理器：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Rust 不会允许它通过编译！我们不能将<strong>唯一的</strong>可变引用 “分成两份” 来使用。\n不过我们可以将可变引用重新借用为不可变引用交给两个程序使用：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token operator">*</span>cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"John Doe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过我们可以使用 <code>Cell</code> 来通过内部可变性来更新值，它的开销几乎为零，不过它的限制要比类似的 <code>RefCell</code> 多一些。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Cell</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'static</span> <span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> cx<span class="token punctuation">.</span><span class="token function">use_hook</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Cell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E9%80%9A%E8%BF%87-hooks-%E6%9B%B4%E6%96%B0">通过 Hooks 更新<a class="anchor" href="#%E9%80%9A%E8%BF%87-hooks-%E6%9B%B4%E6%96%B0">§</a></h2>\n<p>类似于 <code>use_state</code> 和 <code>use_ref</code> 通过封装 <code>hooks</code> 来实现可变 <code>Copy</code> ，\n此外，每当设置了新值，它还会将组件标记为 <code>dirty</code>。组件就知道需要要被更新。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> set_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token macro property">rsx!</span><span class="token punctuation">(</span>\n        <span class="token string">"Hello, {name}"</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">set_name</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n        button <span class="token punctuation">{</span> onclick<span class="token punctuation">:</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">set_name</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在内部，我们的 <code>set</code> 函数类似于这样：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token class-name">UseState</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> new<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将内容进行替换更新</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 将当前组件标记为需要刷新</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>cx<span class="token punctuation">.</span><span class="token function">needs_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们所实现的大部分 Hooks 都提供了 Deref 在它们的值之中，如果你想直接访问它们的值：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span>cx<span class="token punctuation">:</span> <span class="token class-name">Scope</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> _set_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cx<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">match</span> <span class="token operator">*</span>name <span class="token punctuation">{</span>\n        <span class="token string">"Jack"</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token string">"Jill"</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        _ <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="dioxus-hooks-%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95">Dioxus-Hooks 提供的方法<a class="anchor" href="#dioxus-hooks-%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95">§</a></h2>\n<p>我们通过 <code>Dioxus-Hooks</code> 为各位开发者提供了以下这些钩子方法，请根据需求自行调用：</p>\n<ul>\n<li>use_state - 储存状态信息并在适当的时候更新</li>\n<li>use_ref - 使用 Refcell 存放未实现 Clone 的数据</li>\n<li>use_future - 存放在初始化结束后需要的 Future</li>\n<li>use_coroutine - 存放可以被 启动/暂停/通讯的 Future</li>\n<li>use_noderef - 存放本地元素的句柄</li>\n<li>use_callback - 存放实现了 PartialEq 的回调用于记忆化</li>\n<li>use_provide_context - 暴露状态数据到派生组件中</li>\n<li>use_context - 使用 use_provide_context 的状态数据</li>\n</ul>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#hooks-%E7%90%86%E8%AE%BA" }, "Hooks \u7406\u8BBA")),
            React.createElement("li", null,
                React.createElement("a", { href: "#hooks-%E6%9C%BA%E5%88%B6" }, "Hooks \u673A\u5236")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%9E%84%E5%BB%BA-hooks" }, "\u6784\u5EFA Hooks")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%80%9A%E8%BF%87-hooks-%E6%9B%B4%E6%96%B0" }, "\u901A\u8FC7 Hooks \u66F4\u65B0")),
            React.createElement("li", null,
                React.createElement("a", { href: "#dioxus-hooks-%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95" }, "Dioxus-Hooks \u63D0\u4F9B\u7684\u65B9\u6CD5")))),
    'author': "YuKun Liu",
    'contributors': [
        "YuKun Liu"
    ],
    'date': "2022-02-14T09:04:10.000Z",
    'updated': null,
    'excerpt': "在本章节中，我们将更加深入的了解 Hook 的工作原理。 Hooks 理论 在过去的几十年里，计算机学者和开发者们一直在试图寻找一种设计用户界面的 “正确方法”。 现在来看，已经出现了很多种设计思路，而它们都各有优势，而大致上...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "介绍",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "text": "安装",
            "link": "/docs/setup.html"
        },
        {
            "text": "入门",
            "link": "/docs/hello-world.html"
        },
        {
            "text": "UI设计",
            "link": "/docs/ui/index.html",
            "children": [
                {
                    "text": "元素介绍",
                    "link": "/docs/ui/vnodes.html"
                },
                {
                    "text": "条件渲染",
                    "link": "/docs/ui/conditional-render.html"
                },
                {
                    "text": "列表渲染",
                    "link": "/docs/ui/lists.html"
                },
                {
                    "text": "特殊属性",
                    "link": "/docs/ui/special-attributes.html"
                }
            ]
        },
        {
            "text": "组件封装",
            "link": "/docs/components/index.html",
            "children": [
                {
                    "text": "组件属性",
                    "link": "/docs/components/properties.html"
                },
                {
                    "text": "传递子元素和属性",
                    "link": "/docs/components/children-attributes.html"
                }
            ]
        },
        {
            "text": "交互性",
            "link": "/docs/interactivity/index.html",
            "children": [
                {
                    "text": "钩子与内部状态",
                    "link": "/docs/interactivity/hooks-state.html"
                }
            ]
        }
    ]
};
